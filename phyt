2a 

def bin_to_dec(val):
    return sum(int(digit) * 2 ** i for i,
    digit in enumerate(val[::-1]))

def oct_to_hex(val):
    return hex(sum(int(digit) * 8 ** i for i,
    digit in enumerate(val[::-1])))[2:].upper()

num1 = input("Enter a binary number: ")
print("decimal:", bin_to_dec(num1))

num2 = input("Enter an octal number: ")
print("hexal:", oct_to_hex(num2))





2a
def fn(n): 
    if n == 1: 
        return 0
    elif n == 2:
        return 1
    else:
        return fn(n - 1) + fn(n - 2)


num = int(input("Enter a number : "))
if num > 0:
    print("fn(", num, ") = ", fn(num), sep="")
else:
    print("Error in input")



3
sentence = input("Enter a sentence: ")

word_count = 0
digCnt = upCnt = loCnt = 0

for ch in sentence:
    if ch == ' ':
        word_count += 1
    elif ch.isdigit():
        digCnt += 1
    elif ch.isupper():
        upCnt += 1
    elif ch.islower():
        loCnt += 1

word_count += 1  # Add one to account for the last word
print(f"This sentence has {word_count} words, {digCnt} digits, {upCnt} uppercase letters, and {loCnt} lowercase letters.")





3
str1 = input("Enter String 1 \n")
str2 = input("Enter String 2 \n") 
if len(str2) < len(str1): 
    short = len(str2) 
    long = len(str1) 
else: 
    short = len(str1) 
    long = len(str2) 
matchCnt = 0 
for i in range(short): 
    if str1[i] == str2[i]: 
        matchCnt += 1 
print("Similarity between two said strings:") 
print(matchCnt/long) 





5
import re

def isphonenumber(numStr):
    return len(numStr) == 12 and all((numStr[i] == '-' if i in (3, 7) else numStr[i].isdigit()) for i in range(len(numStr)))

def chkphonenumber(numStr):
    return bool(re.match(r'^\d{3}-\d{3}-\d{4}$', numStr))

ph_num = input("Enter a phone number: ")

print("Without using Regular Expression:", "Valid" if isphonenumber(ph_num) else "Invalid")
print("Using Regular Expression:", "Valid" if chkphonenumber(ph_num) else "Invalid")





5
import re
phone_regex = re.compile(r'\+\d{12}')
email_regex = re.compile(r'[A-Za-z0-9._]+@[A-Za-z0-9]+\.[A-Z|a-z]{2,}')
with open('ABC.txt', 'r') as f:
    for line in f:
        matches = phone_regex.findall(line)
        for match in matches:
            print(match)
        matches = email_regex.findall(line)
        for match in matches:
            print(match)





4
def roman_to_decimal(romStr):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total_value = right_value = 0

    for numeral in reversed(romStr):
        left_value = roman_dict[numeral]
        total_value += left_value if left_value >= right_value else -left_value
        right_value = left_value

    return total_value


romanStr = input("Enter a Roman Number : ")
print(roman_to_decimal(romanStr))



4
import random

def merge_sort(lst):
    if len(lst) <= 1: return lst
    mid = len(lst) // 2
    left, right = merge_sort(lst[:mid]), merge_sort(lst[mid:])
    return sorted(left + right)

def insertion_sort(s):
    for i in range(1, len(s)):
        key, j = s[i], i - 1
        while j >= 0 and key < s[j]: s[j + 1], j = s[j], j - 1
        s[j + 1] = key

my_list = [random.randint(0, 999) for _ in range(10)]

print("\nUnsorted List")
print(my_list)
print("Sorting using Insertion Sort")
insertion_sort(my_list)
print(my_list)

my_list = [random.randint(0, 999) for _ in range(10)]

print("\nUnsorted List")
print(my_list)
print("Sorting using Merge Sort")
print(merge_sort(my_list))






8

class PaliStr:
    def __init__(self):
        self.isPali = False

    def chkPalindrome(self, myStr):
        if myStr == myStr[::-1]:
            self.isPali = True
        else:
            self.isPali = False

        return self.isPali


class PaliInt(PaliStr):
    def __init__(self):
        self.isPali = False

    def chkPalindrome(self, val):


        if str(val) == str(val)[::-1]:
            self.isPali = True
        else:
            self.isPali = False

        return self.isPali


st = input("Enter a string : ")

stObj = PaliStr()
if stObj.chkPalindrome(st):
    print("Given string is a Palindrome")



else:
    print("Given string is not a Palindrome")
val = int(input("Enter a integer : "))

intObj = PaliInt()
if intObj.chkPalindrome(val):
    print("Given integer is a Palindrome")
else:
    print("Given integer is not a Palindrome")




10
import json 

with open('weather.json') as file:
    data = json.load(file) 

current_temp = data['main']['temp'] 
humidity = data['main']['humidity']
weather_desc = data['weather'][0]['description']

print(f"Current temperature: {current_temp}°C")
print(f"Humidity: {humidity}%")
print(f"Weather description: {weather_desc}")


{

  "weather": [{ "description": "clear sky"}],
  "main": {"temp": 15.45, "humidity": 64}

}









10
from PyPDF2 import PdfWriter, PdfReader

num = int(input("Enter page number you want combine from multiple documents "))

pdf1 = open('birds.pdf', 'rb')
pdf2 = open('birdspic.pdf', 'rb')

pdf_writer = PdfWriter()
pdf1_reader = PdfReader(pdf1)
page = pdf1_reader.pages[num - 1]
pdf_writer.add_page(page)

pdf2_reader = PdfReader(pdf2)
page = pdf2_reader.pages[num - 1]
pdf_writer.add_page(page)

with open('output.pdf', 'wb') as output:
    pdf_writer.write(output) 







1

m1 = int(input("Enter marks for test1 : ")) 
m2 = int(input("Enter marks for test2 : ")) 
m3 = int(input("Enter marks for test3 : ")) 
if m1 <= m2 and m1 <= m3: 
    avgMarks = (m2+m3)/2 
elif m2 <= m1 and m2 <= m3: 
    avgMarks = (m1+m3)/2 
elif m3 <= m1 and m3 <= m2: 
    avgMarks = (m1+m2)/2     
print("Average of best two test marks  out of three test’s marks is", avgMarks) 



1
val = int(input("Enter a value : ")) 
str_val = str(val) 
if str_val == str_val[::-1]: 
    print("Palindrome") 
else: 
    print("Not Palindrome") 
for i in range(10): 
    if str_val.count(str(i)) > 0: 
        print(str(i),"appears", str_val.count(str(i)), "times")



6
import os.path
import sys

fname = input("Enter the filename : ")

if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)

infile = open(fname, "r")

lineList = infile.readlines()

for i in range(4):
    print(i + 1, ":", lineList[i])
word = input("Enter a word : ")

cnt = 0
for line in lineList:
    cnt += line.count(word)
print("The word", word, "appears", cnt, "times in the file")





6
import os
import sys
import pathlib
import zipfile

dirName = input("Enter Directory name that you want to backup : ")
if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
curDirectory = pathlib.Path(dirName)
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
        archive.write(file_path, arcname=file_path.relative_to(curDirectory))
if os.path.isfile("myZip.zip"):
    print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")




7

import math


class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""

    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")


class Circle(Shape):
    def __init__(self, radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius

    def calcArea(self):
        self.area = math.pi * self.radius * self.radius


class Rectangle(Shape):
    def __init__(self, length, breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth

    def calcArea(self):
        self.area = self.length * self.breadth


class Triangle(Shape):
    def __init__(self, base, height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height

    def calcArea(self):
        self.area = self.base * self.height / 2


c1 = Circle(5)
c1.calcArea()
c1.showArea()

r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()
t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()



7
class Employee: 
    def __init__(self): 
        self.name = "" 
        self.empId = "" 
        self.dept = "" 
        self.salary = 0 
    def getEmpDetails(self): 
        self.name = input("Enter Employee name : ") 
        self.empId = input("Enter Employee ID : ") 
        self.dept = input("Enter Employee Dept : ") 
        self.salary = int(input("Enter Employee Salary : "))   
    def showEmpDetails(self): 
        print("Employee Details") 
        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)
    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))
        print("Updated Salary", self.salary)
e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary() 




9
import requests
import os
from bs4 import BeautifulSoup

# Set the URL of the first XKCD comic 
url = 'https://xkcd.com/1/'

# Create a folder to store the comics 
if not os.path.exists('xkcd_comics'):
    os.makedirs('xkcd_comics')



# Loop through all the comics
while True:
    # Download the page content 
    res = requests.get(url)
    res.raise_for_status()

    # Parse the page content using BeautifulSoup 
    soup = BeautifulSoup(res.text, 'html.parser')

    # Find the URL of the comic image 
    comic_elem = soup.select('#comic img')
    if comic_elem == []:
        print('Could not find comic image.')
    else:
        comic_url = 'https:' + comic_elem[0].get('src')

        # Download the comic image 
        print(f'Downloading {comic_url}...')
        res = requests.get(comic_url)
        res.raise_for_status()

        # Save the comic image to the xkcd_comics folder 
        image_file = open(os.path.join('xkcd_comics', os.path.basename(comic_url)), 'wb')
        for chunk in res.iter_content(100000):
            image_file.write(chunk)
        image_file.close()

        # Get the URL of the previous comic
    prev_link = soup.select('a[rel="prev"]')[0]
    if not prev_link:
        break
    url = 'https://xkcd.com' + prev_link.get('href')

print('All comics downloaded.') 



9

from openpyxl import Workbook
from openpyxl.styles import Font

wb = Workbook()
sheet = wb.active
sheet.title = "Language"
wb.create_sheet(title="Capital")
lang = ["Kannada", "Telugu", "Tamil"]
state = ["Karnataka", "Telangana", "Tamil Nadu"]
capital = ["Bengaluru", "Hyderabad", "Chennai"]
code = ['KA', 'TS', 'TN']
sheet.cell(row=1, column=1).value = "State"
sheet.cell(row=1, column=2).value = "Language"
sheet.cell(row=1, column=3).value = "Code"

ft = Font(bold=True)
for row in sheet["A1:C1"]:
    for cell in row:
        cell.font = ft
for i in range(2, 5):
    sheet.cell(row=i, column=1).value = state[i - 2]
    sheet.cell(row=i, column=2).value = lang[i - 2]
    sheet.cell(row=i, column=3).value = code[i - 2]
wb.save("demo.xlsx")
sheet = wb["Capital"]
sheet.cell(row=1, column=1).value = "State"
sheet.cell(row=1, column=2).value = "Capital"
sheet.cell(row=1, column=3).value = "Code"
ft = Font(bold=True)
for row in sheet["A1:C1"]:
    for cell in row:
        cell.font = ft
for i in range(2, 5):
    sheet.cell(row=i, column=1).value = state[i - 2]
    sheet.cell(row=i, column=2).value = capital[i - 2]
    sheet.cell(row=i, column=3).value = code[i - 2]
wb.save("demo.xlsx")
srchCode = input("Enter state code for finding capital ")



for i in range(2, 5):
    data = sheet.cell(row=i, column=3).value
    if data == srchCode:
        print("Corresponding capital for code", srchCode, "is", sheet.cell(row=i, column=
        2).value)
sheet = wb["Language"]
srchCode = input("Enter state code for finding language ")
for i in range(2, 5):
    data = sheet.cell(row=i, column=3).value
    if data == srchCode:
        print("Corresponding language for code", srchCode, "is", sheet.cell(row=i, column
        =2).value)
wb.close() 

